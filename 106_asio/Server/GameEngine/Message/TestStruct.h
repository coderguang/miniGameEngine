//******************************************
// generated by royalchen's csgl tools
// email:royalchen@royalchen.com 
// FAQ:www.royalchen.com
// ******************************************
#ifndef _MESSAGE_TEST_STRUCT_H_
#define _MESSAGE_TEST_STRUCT_H_

#include "engine/serialize/serializestream.h"
#include "engine/def/csg_def.h"
#include "engine/mq/msgBlock.h"
#include "engine/mq/msgManager.h"
#include "engine/rpc/rmiObject.h"


using namespace csg;

namespace Message {

	enum ETestStruct {
		ETestOneEx = 1,
		ETestTwoEx,
		ETestThreeEx = 5,
	};

	void _csg_write(CSerializeStream& __os,ETestStruct __enumType);
	void _csg_read(CSerializeStream& __is,ETestStruct& __enumType);


	class STestStruct
		:public virtual csg::IMsgBase {
	public:
		int  a;
		bool  b;
		std::string  str;
		std::vector<int> ib;

	public:
		STestStruct();
		STestStruct(const STestStruct &);
		STestStruct& operator=(const STestStruct &);

	public:
		bool operator==(const STestStruct &)const;
		bool operator!=(const STestStruct &)const;
		bool operator<(const STestStruct &)const;

		void _csg_init();
		void _csg_read(CSerializeStream&);
		void _csg_write(CSerializeStream&)const;

		virtual IMsgBase* clone();
		virtual int getType()const;
	private:
		static const int _msgType = 5;
	};

	typedef csg::CSmartPointShare<STestStruct> STestStruct_Ptr;


	class CTestStruct{
	public:
		static void regist();
	};

}


#endif


